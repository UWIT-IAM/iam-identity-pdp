  - name: create app directory
    file: "path={{app_base}}/{{app_name}} state=directory"

  - name: update install status
    copy: "src=install.status dest={{app_base}}/{{app_name}}"

  - name: copy manage.py
    copy: "src=../{{item}} dest={{app_base}}/{{app_name}} mode=775"
    with_items:
      - manage.py
      - setup.py
    notify:
      - touch wsgi

  - name: copy requirements
    copy: "src=../requirements.txt dest={{app_base}}/{{app_name}}/requirements.txt"

  - name: copy app
    synchronize: "src=../{{app_name}} dest={{app_base}}/{{app_name}} delete=yes"
    notify: touch wsgi

  - name: copy site files
    synchronize: "src=../{{app_name}}-site dest={{app_base}}/{{app_name}} delete=yes"
    notify: touch wsgi

  # - name: copy tester script
  #   template: "src=../{{app_name}}-site/verify_api_access.sh.j2 dest={{app_base}}/{{app_name}}/nsspr-site/verify_api_access.sh group=iam-dev mode=775"


  # copy appropriate local settings
  - name: local stat of cluster_type settings
    local_action: "stat path=../{{app_name}}-site/{{cluster_type}}_settings.py"
    register: settings_stat

  - name: copy local settings
    copy: "src=../{{app_name}}-site/{{ cluster_type }}_settings.py dest={{app_base}}/{{app_name}}/{{app_name}}-site/local_settings.py"
    when: settings_stat.stat.exists
    notify:
       - touch wsgi

  - debug: "Note.. local_settings.py for cluster {{cluster_type}} not copied"
    when: not settings_stat.stat.exists

  - name: stat virtualenv
    stat: "path={{app_base}}/{{app_name}}/bin/activate"
    register: virtualenv_stat

  - name: create virtualenv
    command: "virtualenv --system-site-packages {{app_base}}/{{app_name}}"
    when: not virtualenv_stat.stat.exists

  - name: verify libraries
    pip: requirements={{ app_base }}/{{app_name}}/requirements.txt virtualenv={{ app_base }}/{{app_name}} extra_args='-U'
    notify:
       - touch wsgi
       - restart apache

  # update http and https config
  - include: "ansible-tools/tasks/apache_config.yml file=https prod={{app_name}}"
  - include: "ansible-tools/tasks/apache_config.yml file=http prod={{app_name}}"
  - include: "ansible-tools/tasks/apache_config.yml file=global prod={{app_name}}"

  - name: create log directory
    file: "path=/logs/{{app_name}} state=directory"

  - name: verify db
    file: "path={{ app_base }}/{{app_name}}/db state=directory"

  # setup db
  - name: check db 1
    stat: path={{app_base}}/{{app_name}}/db/db.sqlite3
    register: db_stat

  - name: check db 2
    django_manage: command=migrate app_path={{app_base}}/{{app_name}} python_path={{app_base}}/{{app_name}} virtualenv={{app_base}}/{{app_name}}
    when: db_stat.stat.exists == False

  - name: check db 3
    file: "path={{ app_base }}/{{app_name}}/db/db.sqlite3 state=file group=iam-dev mode=664"
    when: db_stat.stat.exists == False

  - name: collect statics
    django_manage: command=collectstatic app_path={{app_base}}/{{app_name}} python_path={{app_base}}/{{app_name}} virtualenv={{app_base}}/{{app_name}}
    when: db_stat.stat.exists == False
